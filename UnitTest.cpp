#include <vector>
#include <iostream>
#include "Solution.hpp"

struct testcase { string s, k; bool output; };

class UnitTest {
private:
    vector<testcase> testcases;
    Solution obj;
public:
    UnitTest() {
        testcases = {{"))()))", "010100", true},
                     {"()()", "0000", true},
                     {")", "0", false},
                     {"())(()(()(())()())(())((())(()())((())))))(((((((())(()))))(", 
                      "100011110110011011010111100111011101111110000101001101001111", 
                      false},
                     {"))))(())((()))))((()((((((())())((()))((((())()()))(()",
                      "101100101111110000000101000101001010110001110000000101",
                      false},
                     {"))(())()((()))))(()()()()())(((())(())))))()(())()())(((((()()()()())))))())()((((())())()))())((()((((())))))())())((()((()))()(())()()(()))((()()()()((()(())))())((()())()(()))(()()()()(()()))))()((()()))()()()))())((((()((()(())()()(()(((()())",
                      "100110010100110101000010010010000101101000111010010100110100100110101100111011100111110101011010010101001110001110110001110001001010000011011100001111110100101110001001110101110101110110010001000111011011100101011001111001110111111111110001111011",
                      false}};
    }

    void test() {
        for(int i = 0; i < testcases.size(); ++i) {
            bool result = obj.canBeValid(testcases[i].s, testcases[i].k);
            cout << "TestCase " << i+1 << ": " << ((result == testcases[i].output) ? "passed":"failed") << endl;
        }
    }
};

int main() {
    UnitTest test;
    test.test();
}